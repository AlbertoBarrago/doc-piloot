import {Octokit} from "octokit";

interface PushReadmeOptions {
    octokit: Octokit;
    owner: string;
    repo: string;
    content: string;
    branchName?: string;
    commitMessage?: string;
    prTitle?: string;
    prBody?: string;
}

export async function pushReadme({
                                     octokit,
                                     owner,
                                     repo,
                                     content,
                                     branchName = "update-readme",
                                     commitMessage = "chore: update README.md generated by app",
                                     prTitle = "Update README.md automatically",
                                     prBody = "This PR updates README.md file generated by the GitHub App.",
                                 }: PushReadmeOptions) {
    const {data: repoData} = await octokit.rest.repos.get({owner, repo});
    const defaultBranch = repoData.default_branch;

    const {
        data: {
            object: {sha: baseCommitSha},
        },
    } = await octokit.rest.git.getRef({
        owner,
        repo,
        ref: `heads/${defaultBranch}`,
    });

    let branchExists = true;
    try {
        await octokit.rest.git.getRef({
            owner,
            repo,
            ref: `heads/${branchName}`,
        });
    } catch (error) {
        branchExists = false;
    }

    if (!branchExists) {
        await octokit.rest.git.createRef({
            owner,
            repo,
            ref: `refs/heads/${branchName}`,
            sha: baseCommitSha,
        });
    }

    let readmeSha: string | undefined;
    try {
        const {data: readmeData} = await octokit.rest.repos.getContent({
            owner,
            repo,
            path: "README.md",
            ref: defaultBranch,
        });

        if ("sha" in readmeData) {
            readmeSha = readmeData.sha;
        }
    } catch {
        // README.md does not exist yet â€” we can create it
    }

    // Upload new content blob
    const contentEncoded = Buffer.from(content, "utf-8").toString("base64");

    await octokit.rest.repos.createOrUpdateFileContents({
        owner,
        repo,
        path: "README.md",
        message: commitMessage,
        content: contentEncoded,
        branch: branchName,
        sha: readmeSha,
    });

    const {data: pulls} = await octokit.rest.pulls.list({
        owner,
        repo,
        head: `${owner}:${branchName}`,
        base: defaultBranch,
        state: "open",
    });

    if (pulls.length === 0) {
        await octokit.rest.pulls.create({
            owner,
            repo,
            title: prTitle,
            head: branchName,
            base: defaultBranch,
            body: prBody,
        });
    } else {
        console.log(`PR already exists: #${pulls[0].number}`);
    }
}

import {Octokit} from "octokit";

interface PushReadmeOptions {
    octokit: Octokit;
    owner: string;
    repo: string;
    content: string | null;
    branchName?: string;
    commitMessage?: string;
    prTitle?: string;
    prBody?: string;
}

export async function pushReadme({
                                     octokit,
                                     owner,
                                     repo,
                                     content,
                                     branchName = "update-readme",
                                     commitMessage = "docs: update README.md generated by ðŸ¤– doc-piloot",
                                     prTitle = "Update README.md",
                                     prBody = "This PR updates the README.md file with automatically generated content from doc-piloot."
                                 }: PushReadmeOptions) {
    try {
        if(!content) return;

        // Get the default branch reference (usually main or master)
        const {data: repository} = await octokit.rest.repos.get({
            owner,
            repo
        });

        const defaultBranch = repository.default_branch;
        console.log(`Default branch: ${defaultBranch}`);

        // Get the latest commit SHA from the default branch
        const {data: refData} = await octokit.rest.git.getRef({
            owner,
            repo,
            ref: `heads/${defaultBranch}`
        });

        const latestCommitSha = refData.object.sha;
        console.log(`Latest commit SHA: ${latestCommitSha}`);

        // Check if a branch already exists
        let branchExists = true;
        try {
            await octokit.rest.git.getRef({
                owner,
                repo,
                ref: `heads/${branchName}`
            });
            console.log(`Branch ${branchName} already exists`);
        } catch (error) {
            branchExists = false;
            console.log(`Branch ${branchName} does not exist, will create it`);
        }

        // Create a branch if it doesn't exist
        if (!branchExists) {
            await octokit.rest.git.createRef({
                owner,
                repo,
                ref: `refs/heads/${branchName}`,
                sha: latestCommitSha
            });
            console.log(`Created branch ${branchName} from ${defaultBranch}`);
        }

        // Try to get README.md from the new branch to get its SHA if it exists
        let readmeSha: string | undefined;
        try {
            const {data: readmeData} = await octokit.rest.repos.getContent({
                owner,
                repo,
                path: "README.md",
                ref: branchName,
            });

            if ("sha" in readmeData) {
                readmeSha = readmeData.sha;
                console.log(`Found existing README.md with SHA: ${readmeSha}`);
            }
        } catch (error) {
            console.log("README.md not found in branch, will create new one");
        }

        const contentEncoded = Buffer.from(content, "utf-8").toString("base64");
        await octokit.rest.repos.createOrUpdateFileContents({
            owner,
            repo,
            path: "README.md",
            message: commitMessage,
            content: contentEncoded,
            branch: branchName,
            sha: readmeSha,
        });
        console.log("README.md created or updated successfully");

        // Check for existing PRs
        const {data: pulls} = await octokit.rest.pulls.list({
            owner,
            repo,
            head: `${owner}:${branchName}`,
            state: "open",
        });

        // Create PR if it doesn't exist
        if (pulls.length === 0) {
            const {data: newPr} = await octokit.rest.pulls.create({
                owner,
                repo,
                title: prTitle,
                head: branchName,
                base: defaultBranch,
                body: prBody,
            });
            console.log(`Created new PR #${newPr.number}`);
        } else {
            console.log(`PR already exists: #${pulls[0].number}`);
        }
    } catch (error) {
        console.error("Error in pushReadme:", error);
        throw error;
    }
}
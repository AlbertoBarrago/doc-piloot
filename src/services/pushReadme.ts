import {Octokit} from "octokit";

interface PushReadmeOptions {
    octokit: Octokit;
    owner: string;
    repo: string;
    content: string | null;
    branchName?: string;
    commitMessage?: string;
    prTitle?: string;
    prBody?: string;
}

export async function pushReadme({
                                     octokit,
                                     owner,
                                     repo,
                                     content,
                                     branchName = "update-readme",
                                     commitMessage = "docs: update README.md generated by doc-pilot",
                                     prTitle = "Update README.md",
                                     prBody = "This PR updates the README.md file with automatically generated content from doc-pilot."
                                 }: PushReadmeOptions) {
    try {
        if(!content) return;
        let readmeSha: string | undefined;
        try {
            const {data: readmeData} = await octokit.rest.repos.getContent({
                owner,
                repo,
                path: "README.md",
                ref: branchName,
            });

            if ("sha" in readmeData) {
                readmeSha = readmeData.sha;
            }
        } catch (error) {
            console.log("README.md or branch not found, will create new one");
        }

        const contentEncoded = Buffer.from(content, "utf-8").toString("base64");
        await octokit.rest.repos.createOrUpdateFileContents({
            owner,
            repo,
            path: "README.md",
            message: commitMessage,
            content: contentEncoded,
            branch: branchName,
            sha: readmeSha,
        });

        const {data: pulls} = await octokit.rest.pulls.list({
            owner,
            repo,
            head: `${owner}:${branchName}`,
            state: "open",
        });

        if (pulls.length === 0) {
            const {data: repoData} = await octokit.rest.repos.get({owner, repo});
            await octokit.rest.pulls.create({
                owner,
                repo,
                title: prTitle,
                head: branchName,
                base: repoData.default_branch,
                body: prBody,
            });
        } else {
            console.log(`PR already exists: #${pulls[0].number}`);
        }
    } catch (error) {
        console.error("Error in pushReadme:", error);
        throw error;
    }
}